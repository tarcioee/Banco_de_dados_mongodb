import pymongo
from faker import Faker
from datetime import datetime, timedelta
import random

# Conexão com o MongoDB
client = pymongo.MongoClient("mongodb://localhost:27017/")
db = client["Vivipizas"]

# Faker para dados aleatórios
fake = Faker('pt_BR')

# --- Gerar dados para Cliente ---
clientes = []
cpfs_usados = set()
for _ in range(5000):
    while True:
        cpf = fake.cpf()
        cpf = fake.cpf().replace('.', '').replace('-', '')  
        if cpf not in cpfs_usados:
            cpfs_usados.add(cpf)
            break
    compras =random.randint(0, 500)
    if compras> 100:
        cat = "ouro"
    elif compras>10:
        cat ="prata"
    else:
        cat ="bronze"
    telefone = fake.phone_number()
        # Gerar questões alimentares para o cliente
    questoes_alimentares = []
    for _ in range(random.randint(0, 3)):  # Um cliente pode ter de 0 a 3 questões alimentares
        tipo = random.choice(["diabetes", "hipertensão", "intolerante a lactose", "vegano", "vegetariano"])
        restringir = random.choice([True, False])
        questao = {
            "tipo": tipo,
            "restringir": restringir
        }
        questoes_alimentares.append(questao)
    if len(telefone) > 15:
        telefone = telefone[:15]
    cliente = {
        "nm_cliente": fake.name(),
        "cpf_cliente": cpf,
        "tel_cliente": telefone,
        "endereco": fake.address(),
        "qtd_compras": compras,
        "categoria_cliente": cat,
        "questoes_alimentares": questoes_alimentares
    }
    clientes.append(cliente)
db.Cliente.insert_many(clientes)

# --- Gerar dados para Cargo ---
cargos = [
    {"nm_cargo": "Gerente", "salario": 5000.0, "horas_semanais": 40},
    {"nm_cargo": "Atendente", "salario": 1500.0, "horas_semanais": 36},
    {"nm_cargo": "Cozinheiro", "salario": 2000.0, "horas_semanais": 40},
    {"nm_cargo": "Entregador", "salario": 1200.0, "horas_semanais": 30},
]

# --- Gerar dados para Funcionario ---
funcionarios = []
cpfs_funcionarios_usados = set()
for _ in range(20):
    while True:
        cpf = fake.cpf()
        cpf = fake.cpf().replace('.', '').replace('-', '')  
        if cpf not in cpfs_funcionarios_usados:
            cpfs_funcionarios_usados.add(cpf)
            break
    telefone = fake.phone_number()
    if len(telefone) > 15:
        telefone = telefone[:15]
    cargo = random.choice(cargos)
    funcionario = {
        "ce_cargo": random.choice(cargos),
        "nm_funcionario": fake.name(),
        "cpf_funcionario": cpf,
        "email_funcionario": fake.email(),
        "tel_funcionario": telefone,
        "tarefas_ativas": random.randint(0, 5),
        "status_funcionario": random.choice(["Indisponível", "Disponível"]),
        "cargo": cargo
    }
    funcionarios.append(funcionario)
funcionario_ids = db.Funcionario.insert_many(funcionarios).inserted_ids

# --- Gerar dados para Produto ---
produtos = []
for _ in range(5000):
    tipo_produto = random.choice(["pizza", "aperitivo", "sobremesa", "bebida", "bebida alcoolica", "utensilios"])
    produto = {
        "tipo_produto": tipo_produto,
        "nm_produto": fake.word().capitalize(),
        "preco_produto": round(random.uniform(5.0, 50.0), 2),
        "descricao": fake.sentence(),
        "qtd_disponivel": random.randint(0, 100),
        "porcentagem_promoção": round(random.uniform(0, 50), 2)
    }
    # Condições para produtos específicos, como pizza ou bebida
    if tipo_produto == "pizza":
        produto["tamanho_pizza"] = random.choice(["Pequena", "Média", "Grande"])
    elif tipo_produto == "bebida" or tipo_produto == "bebida alcoolica":
        produto["volume_bebida"] = random.choice(["200ml", "500ml", "1L", "2L"])
    # Gerar ingredientes para o produto
    ingredientes = []
    if tipo_produto =="pizza":
        for _ in range(random.randint(1, 10)):  # Uma pizza pode ter de 1 a 10 ingredientes nesses exemplos
            ingrediente = {
                "nm_ingrediente": fake.word(),
                "tipo": random.choice(["animal", "vegetal", "farinha", "lacticinio", "outro"]),
                "gramas_ingrediente": random.randint(10, 200)  # Quantidade de ingrediente em gramas
            }
            ingredientes.append(ingrediente)        
    produto["Ingredientes"] = ingredientes
    produtos.append(produto)
produto_ids = db.Produto.insert_many(produtos).inserted_ids

# --- Gerar dados para Pedido ---
pedidos = []
for _ in range(5000):
    pedido = {
        "ce_cliente": random.choice(clientes)["_id"],
        "data_pedido": fake.date_time_between(start_date="-1y", end_date="now"),
        "observações": fake.sentence(),
        "status_pedido": random.choice(["Não-confirmado", "Em aberto", "Concluído", "Cancelado"]),
        "valor_total": round(random.uniform(50.0, 500.0), 2)
    }
    pedidos.append(pedido)
pedido_ids = db.Pedido.insert_many(pedidos).inserted_ids

# --- Gerar dados para Funcionario_pedido ---
funcionario_pedido = []
for _ in range(5000):
    relacao = {
        "ce_funcionario": random.choice(funcionario_ids),
        "ce_pedido": random.choice(pedido_ids),
        "papel": random.choice(["Entregador", "Cozinheiro", "Gerente"]),
        "observação_funcionário": fake.sentence()
    }
    funcionario_pedido.append(relacao)
db.Funcionario_pedido.insert_many(funcionario_pedido)

# --- Gerar dados para Produto_pedido ---
produto_pedido = []
for _ in range(5000):
    relacao = {
        "ce_produto": random.choice(produto_ids),
        "ce_pedido": random.choice(pedido_ids),
        "qtd_compradas": random.randint(1, 5)
    }
    produto_pedido.append(relacao)
db.Produto_pedido.insert_many(produto_pedido)



print("Dados inseridos com sucesso!")
client.close()
